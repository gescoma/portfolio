---
import i18next from "i18next"
import ISO6991 from "iso-639-1"
import { localizePath } from "astro-i18next"
import CaretDown from "./icons/CaretDown.astro"

interface languageMapping {
  [localeCode: string]: string
}

export interface Props extends astroHTML.JSX.SelectHTMLAttributes {
    showFlag?: boolean
languageMapping?: languageMapping
}

const supportedLanguages = i18next.languages
const currentLanguage = i18next.language

const { pathname } = Astro.url

const { showFlag = false, languageMapping, ...attributes } = Astro.props

const currentLanguageNativeName = languageMapping
  ? languageMapping[currentLanguage]
  : ISO6991.getNativeName(currentLanguage)

---
<div class="dropdown" data-open="false">
  <button class="language-button" {...attributes}>
    {currentLanguageNativeName}
    <CaretDown height="0.9rem" />
  </button>
  <div class="dropdown__body">
    <ul>
      {
        supportedLanguages.map((language) => {
          const label = languageMapping
            ? languageMapping[language]
            : ISO6991.getNativeName(language)

          if(language === currentLanguage) return (
            <li><span class="current-language">{label}</span></li>)

          return <li><a href={localizePath(pathname, language)}>{label}</a></li>
        })
      }
    </ul>
  </div>
</div>

<style>
  /* BUTTON STYLES */
  button {
    background-color: transparent;
    font-size: 0.9rem;
    color: #000;
    padding: 0.5rem 0.75rem 0.5rem 1rem;
    font-weight: 600;
    font-family: var(--font-primary);
    text-decoration-line: underline;
    text-decoration-color: rgba(0, 0, 0, 0);
    text-decoration-thickness: 0.05em;
    text-underline-offset: 0.15em;
    transition: text-decoration-color 300ms,
                background-color 200ms ease-in-out;
    cursor: pointer;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    z-index: 99999;
  }

  button :global(svg) {
    margin-top: 0.1rem;
    transition: all 100ms ease-in-out;
  }

  button:hover {
      text-decoration-color: currentColor;
      background-color: var(--hover-color);
  }

  .dropdown[data-open="true"] button {
      background-color: var(--hover-color);
  }

  /* DROPDOWN STYLES */
  
  .dropdown {
    position: relative;
  }

  .dropdown[data-open="false"] {
    position: relative;
  }

  .dropdown[data-open="true"] :global(svg) {
    transform: rotate(180deg);
    margin-top: 0rem
  }

  .dropdown[data-open="true"] .dropdown__body,
  .dropdown[data-open="closing"] .dropdown__body {
    display: block;
    position: absolute;
    z-index: 99990;
    animation: FadeInDown 150ms ease-in-out;
  }

  .dropdown[data-open="closing"] .dropdown__body {
    opacity: 0;
    animation: FadeOutUp 150ms ease-in-out;}

  .dropdown[data-open="false"] .dropdown__body {
    display: none;
  }

  /* DROPDOWN__body ELEMENT */

  .dropdown__body {
    background-color: #fff;
    border-radius: 0.5rem;
    padding: 0.5rem 0;
    width: 100%;
  }

  .dropdown__body ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .dropdown__body ul li {
    font-size: 0.9rem;
  }

  .dropdown__body ul li a {
    padding: 0.5rem 1rem;
    display: block;
    font-weight: 400;
  }

  .dropdown__body ul li span.current-language {
    background-color: rgba(240,240,240,0.5);
    padding: 0.5rem 1rem;
    display: block;
    font-weight: 600;
    
  }

  .dropdown__body ul li a:hover {
    background-color: rgba(240,240,240,0.5);
  }

  /* TRANSITIONS */

  @keyframes FadeInDown {
    0% {
      opacity: 0;
      transform: translateY(-100%);
    }
    70% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes FadeOutUp {
    0% {
      opacity: 1;
      transform: translateY(0);
    }
    70% {
      opacity: 0;
    }
    100% {
      transform: translateY(-100%);
      opacity: 0;
    }
  }
</style>

<script>
  const buttons = document.querySelectorAll(".language-button")

  document.addEventListener("click", () => {
    const dropdowns = document.querySelectorAll(".dropdown")
    dropdowns.forEach((dropdown) => {
      const element = dropdown as HTMLElement
      if (element.dataset.open === "false") return
      closeDropdown(element)
    })
  })

  buttons.forEach((button) => {
    button.addEventListener("click", (e) => {
      e.stopPropagation()
      const parent = button.parentElement
      if(!parent) throw new Error("No parent element found")
      const opened = parent.dataset.open === "true"
      if (!opened) {
        openDropdown(parent)
      } else {
        closeDropdown(parent)
      }
    })
  })

  function openDropdown(element: HTMLElement) {
    element.dataset.open = `true`
  }

  function closeDropdown(element: HTMLElement) {
    element.dataset.open = `closing`
    setTimeout(() => {
      element.dataset.open = `false`
    }, 300)
  }


</script>

