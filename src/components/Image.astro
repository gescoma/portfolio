---
export interface Props {
  src: string
  alt: string
  size?: "small" | "medium" | "large" | "full" | "icon"
  rounded?: "full" | "medium" | "large" | "none" | "small"
  lazy?: boolean
  blur?: boolean
  square?: boolean
}

const {
  src,
  alt,
  size = "medium",
  lazy = false,
  blur = false,
  rounded = "none",
  square = false,
}: Props = Astro.props

if (!src) {
  throw new Error("Image component requires a src prop")
}
if (!alt) {
  throw new Error("Image component requires an alt prop")
}

const srcArray = src.split("/")
const name = srcArray.pop()
if (!name) {
  throw new Error("Image component requires a valid src prop")
}
const [imageName, imageExtension] = name.split(".")
const url = srcArray.join("/")

if (!["jpg", "jpeg", "png"].includes(imageExtension)) {
  throw new Error("Image component requires a valid image extension")
}
---

{
  lazy ? (
    blur ? (
      <div
        class={`image image-lazy-blur image-${size} image-rounded-${rounded} ${
          square ? "image-square" : ""
        }`}
        style={{
          backgroundImage: `url(${url}/${imageName}_small.${imageExtension})`,
        }}
      >
        <img alt={alt} loading="lazy" src={src} />
      </div>
    ) : (
      <img
        src=""
        alt={alt}
        loading="lazy"
        class={`image image-${size} image-lazy image-rounded-${rounded} ${
          square ? "image-square" : ""
        } `}
        data-src={src}
      />
    )
  ) : (
    <img
      src={src}
      alt={alt}
      class={`image image-${size} image-rounded-${rounded} ${
        square ? "image-square" : ""
      }`}
    />
  )
}

<style>
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .image {
    height: 100%;
    display: block;
    overflow: hidden;
    position: relative;
    border-radius: 0px;
  }

  .image-lazy-blur {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    filter: blur(3px);
  }

  .image-lazy-blur img {
    opacity: 0;
    transition: opacity 250ms ease-in-out;
  }

  .image-lazy-blur::before {
    content: "";
    position: absolute;
    inset: 0;
    opacity: 0;
    animation: pulse 2.5s infinite;
    background-color: white;
  }

  .image-lazy-blur.image-lazy--loaded {
    filter: blur(0);
  }

  .image-lazy-blur.image-lazy--loaded img {
    opacity: 1;
  }

  .image-lazy-blur.image-lazy--loaded::before {
    animation: none;
    content: none;
  }

  .image-medium {
    width: 6rem;
  }

  .image-medium.image-square {
    height: 6rem;
  }

  .image-large {
    width: 12rem;
  }

  .image-large.image-square {
    height: 12rem;
  }

  .image-rounded-small {
    border-radius: 0.75rem;
  }
</style>

<script>
  const lazyBlurImages =
    document.querySelectorAll<HTMLImageElement>(".image-lazy-blur")

  function loaded(image: HTMLImageElement) {
    image.classList.add("image-lazy--loaded")
  }

  lazyBlurImages.forEach((image) => {
    const img = image.querySelector("img")
    if (!img) return

    if (img.complete) {
      loaded(image)
    } else {
      img.addEventListener("load", () => loaded(image))
    }
  })
</script>
